rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for better security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.token.email_verified == true;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             (request.auth.token.role == 'admin' ||
              (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true) ||
              request.auth.token.email in ['admin@ailovve.com', 'admin@example.com', 'alimerturgut14@gmail.com']);
    }
    
    function isAdminOrOwner(userId) {
      return isAdmin() || isOwner(userId);
    }
    
    // Chat Conversations - Kullanıcı sadece kendi conversation'larını görebilir, admin hepsini
    match /conversations/{conversationId} {
      allow read, write: if isAdmin() || 
                            (isAuthenticated() && 
                             (resource == null || resource.data.userId == request.auth.uid));
      
      // Conversation oluştururken userId kontrolü
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'sessionId', 'createdAt']);
    }
    
    // Gemini Chat History - Sadece kendi chat history'sine erişim, admin hepsini
    match /gemini_chat_history/{sessionId} {
      allow read, write: if isAdmin() || 
                            (isAuthenticated() && 
                             (resource == null || resource.data.userId == request.auth.uid));
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // Chats collection - Admin için genel erişim
    match /chats/{chatId} {
      allow read, write: if isAdmin() || 
                            (isAuthenticated() && 
                             (resource == null || resource.data.userId == request.auth.uid));
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
                       
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAdmin() || 
                              (isAuthenticated() && 
                               (resource == null || resource.data.userId == request.auth.uid));
      }
    }
    
    // Users - Kullanıcı sadece kendi profilini yönetebilir, admin hepsini
    match /users/{userId} {
      allow read, write: if isAdmin() || isOwner(userId);
      
      // Profil oluştururken gerekli alanların kontrolü
      allow create: if isOwner(userId) && 
                       request.resource.data.keys().hasAll(['email', 'name']) &&
                       request.resource.data.email == request.auth.token.email;
      
      // Profil güncellerken hassas alanları koruma
      allow update: if isAdmin() || 
                       (isOwner(userId) && 
                        !request.resource.data.diff(resource.data).affectedKeys()
                         .hasAny(['uid', 'createdAt', 'email']) &&
                        request.resource.data.email == request.auth.token.email);
    }
    
    // User Settings - Kullanıcı sadece kendi settings'lerini okuyup yazabilir
    match /users/{userId}/settings/{document} {
      allow read, write: if isOwner(userId);
    }
    
    // User Chat Sessions - Kullanıcı sadece kendi session'larını yönetebilir
    match /users/{userId}/chatSessions/{sessionId} {
      allow read, write: if isOwner(userId);
    }
    
    // Honeymoon Packages - Herkes okuyabilir, admin yazabilir
    match /packages/{packageId} {
      allow read: if true; // Public data
      allow write: if isAdmin(); // Admin can write directly
    }
    
    // User Package Favorites - Kullanıcı sadece kendi favorilerini yönetebilir
    match /users/{userId}/favorites/{packageId} {
      allow read, write: if isOwner(userId);
    }
    
    // User Reservations - Kullanıcı sadece kendi rezervasyonlarını görebilir
    match /reservations/{reservationId} {
      allow read, write: if isAuthenticated() && 
                            (resource == null || resource.data.userId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'packageId', 'status']);
    }
    
    // Admin Collection - Sadece admin kullanıcıları
    match /admin/{document} {
      allow read, write: if false; // Functions only
    }
    
    // Analytics & Metrics - Admin okuyabilir ve yazabilir
    match /analytics/{document} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Legacy userSettings path (backward compatibility)
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // User Subscriptions - Kullanıcı sadece kendi subscription'ını yönetebilir
    match /subscriptions/{userId} {
      allow read, write: if isAdmin() || isOwner(userId);
      
      // Subscription oluştururken gerekli alanların kontrolü
      allow create: if isOwner(userId) && 
                       request.resource.data.userId == userId &&
                       request.resource.data.keys().hasAll(['userId', 'planType', 'isActive']);
    }
    
    // Feedback & Support - Kullanıcı kendi feedback'lerini yönetebilir
    match /feedback/{feedbackId} {
      allow read, write: if isAuthenticated() && 
                            (resource == null || resource.data.userId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
  }
} 